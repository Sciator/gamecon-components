/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./src/MultiselectButtons.js":module=>{eval('function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/*\r\n * Helper constants and functions\r\n */\n// TODO: all strings - classes etc. defined up\nvar newEl = function newEl(type) {\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var element = document.createElement(type);\n  attributes.forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        value = _ref2[1];\n\n    return element.setAttribute(key, value);\n  });\n\n  if (typeof children == "string") {\n    element.innerText = children;\n  } else {\n    var childrenArr = Array.isArray(children) ? children : [children];\n    childrenArr.forEach(function (el) {\n      return element.appendChild(el);\n    });\n  }\n\n  return element;\n};\n\nvar Keys = {\n  Backspace: \'Backspace\',\n  Clear: \'Clear\',\n  Down: \'ArrowDown\',\n  End: \'End\',\n  Enter: \'Enter\',\n  Escape: \'Escape\',\n  Home: \'Home\',\n  Left: \'ArrowLeft\',\n  PageDown: \'PageDown\',\n  PageUp: \'PageUp\',\n  Right: \'ArrowRight\',\n  Space: \' \',\n  Tab: \'Tab\',\n  Up: \'ArrowUp\'\n};\nvar MenuActions = {\n  Close: 0,\n  CloseSelect: 1,\n  First: 2,\n  Last: 3,\n  Next: 4,\n  Open: 5,\n  Previous: 6,\n  Select: 7,\n  Space: 8,\n  Type: 9\n}; // filter an array of options against an input string\n// returns an array of options that begin with the filter string, case-independent\n\nvar _filterOptions = function filterOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var filter = arguments.length > 1 ? arguments[1] : undefined;\n  var exclude = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  return options.filter(function (option) {\n    var matches = option.toLowerCase().indexOf(filter.toLowerCase()) === 0;\n    return matches && exclude.indexOf(option) < 0;\n  });\n}; // return an array of exact option name matches from a comma-separated string\n\n\nvar findMatches = function findMatches(options, search) {\n  var names = search.split(\',\');\n  return names.map(function (name) {\n    var match = options.filter(function (option) {\n      return name.trim().toLowerCase() === option.toLowerCase();\n    });\n    return match.length > 0 ? match[0] : null;\n  }).filter(function (option) {\n    return option !== null;\n  });\n}; // return combobox action from key press\n\n\nvar getActionFromKey = function getActionFromKey(key, menuOpen) {\n  // handle opening when closed\n  if (!menuOpen && key === Keys.Down) {\n    return MenuActions.Open;\n  } // handle keys when open\n\n\n  if (key === Keys.Down) {\n    return MenuActions.Next;\n  } else if (key === Keys.Up) {\n    return MenuActions.Previous;\n  } else if (key === Keys.Home) {\n    return MenuActions.First;\n  } else if (key === Keys.End) {\n    return MenuActions.Last;\n  } else if (key === Keys.Escape) {\n    return MenuActions.Close;\n  } else if (key === Keys.Enter) {\n    return MenuActions.CloseSelect;\n  } else if (key === Keys.Backspace || key === Keys.Clear || key.length === 1) {\n    return MenuActions.Type;\n  }\n}; // get index of option that matches a string\n\n\nvar getIndexByLetter = function getIndexByLetter(options, filter) {\n  var firstMatch = _filterOptions(options, filter)[0];\n\n  return firstMatch ? options.indexOf(firstMatch) : -1;\n}; // get updated option index\n\n\nvar getUpdatedIndex = function getUpdatedIndex(current, max, action) {\n  switch (action) {\n    case MenuActions.First:\n      return 0;\n\n    case MenuActions.Last:\n      return max;\n\n    case MenuActions.Previous:\n      return Math.max(0, current - 1);\n\n    case MenuActions.Next:\n      return Math.min(max, current + 1);\n\n    default:\n      return current;\n  }\n}; // check if an element is currently scrollable\n\n\nvar isScrollable = function isScrollable(element) {\n  return element && element.clientHeight < element.scrollHeight;\n}; // ensure given child element is within the parent\'s visible scroll area\n\n\nvar maintainScrollVisibility = function maintainScrollVisibility(activeElement, scrollParent) {\n  var offsetHeight = activeElement.offsetHeight,\n      offsetTop = activeElement.offsetTop;\n  var parentOffsetHeight = scrollParent.offsetHeight,\n      scrollTop = scrollParent.scrollTop;\n  var isAbove = offsetTop < scrollTop;\n  var isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight;\n\n  if (isAbove) {\n    scrollParent.scrollTo(0, offsetTop);\n  } else if (isBelow) {\n    scrollParent.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight);\n  }\n}; // TODO: don\'t pass index when passing option string\n// TODO: rename all combo to multiselect\n\n/*\r\n * Multiselect Combobox w/ Buttons code\r\n */\n\n\nvar MultiselectButtons = /*#__PURE__*/function () {\n  /**\r\n   * @param {Element} container - The x value.\r\n   */\n  function MultiselectButtons(container) {\n    _classCallCheck(this, MultiselectButtons);\n\n    this.container = container;\n    if (!container.childNodes.length) MultiselectButtons._createMultiselect(container);\n    this.el = container.querySelector(\'.js-multi-buttons\');\n    this.comboEl = container.querySelector(\'[role=combobox]\');\n    this.inputEl = container.querySelector(\'input\');\n    this.listboxEl = container.querySelector(\'[role=listbox]\');\n    this.selectedEl = container.querySelector(".selected-options");\n    this.idBase = this.inputEl.id;\n    this.activeIndex = 0;\n    this.open = false;\n    this.selected = [];\n\n    this._initCallbacks();\n\n    this.onSelectionChanged = null;\n  }\n\n  _createClass(MultiselectButtons, [{\n    key: "_initCallbacks",\n    value: // #region domCallbacks\n    // container callbacks\n    function _initCallbacks() {\n      this.inputEl.addEventListener(\'input\', this._onInput.bind(this));\n      this.inputEl.addEventListener(\'blur\', this._onInputBlur.bind(this));\n      this.inputEl.addEventListener(\'click\', this._onClick.bind(this));\n      this.inputEl.addEventListener(\'keydown\', this._onInputKeyDown.bind(this));\n    }\n  }, {\n    key: "_onInput",\n    value: function _onInput() {\n      var currentValue = this.inputEl.value;\n      this.filterOptions(currentValue); // if active option is not in filtered options, set it to first filtered option\n\n      if (this.filteredOptions.indexOf(this.options[this.activeIndex]) < 0) {\n        var firstFilteredIndex = this.options.indexOf(this.filteredOptions[0]);\n\n        this._onOptionChange(firstFilteredIndex);\n      }\n\n      var menuState = this.filteredOptions.length > 0;\n\n      if (this.open !== menuState) {\n        this.updateMenuState(menuState, false);\n      }\n    }\n  }, {\n    key: "_onInputBlur",\n    value: function _onInputBlur() {\n      if (this.ignoreBlur) {\n        this.ignoreBlur = false;\n        return;\n      }\n\n      if (this.open) {\n        this.updateMenuState(false, false);\n      }\n    }\n    /**\r\n     * @param {KeyboardEvent} event\r\n     */\n\n  }, {\n    key: "_onInputKeyDown",\n    value: function _onInputKeyDown(event) {\n      var key = event.key;\n      var max = this.filteredOptions.length - 1;\n      var activeFilteredIndex = this.filteredOptions.indexOf(this.options[this.activeIndex]);\n      var action = getActionFromKey(key, this.open);\n\n      switch (action) {\n        case MenuActions.Next:\n        case MenuActions.Last:\n        case MenuActions.First:\n        case MenuActions.Previous:\n          event.preventDefault();\n          var nextFilteredIndex = getUpdatedIndex(activeFilteredIndex, max, action);\n          var nextRealIndex = this.options.indexOf(this.filteredOptions[nextFilteredIndex]);\n          return this._onOptionChange(nextRealIndex);\n\n        case MenuActions.CloseSelect:\n          event.preventDefault();\n          return this.updateOptionAt(this.activeIndex);\n\n        case MenuActions.Close:\n          event.preventDefault();\n          return this.updateMenuState(false);\n\n        case MenuActions.Open:\n          return this.updateMenuState(true);\n      }\n    }\n  }, {\n    key: "_onClick",\n    value: function _onClick() {\n      this.updateMenuState(true);\n    } // option callbacks\n\n  }, {\n    key: "_onOptionMouseDown",\n    value: function _onOptionMouseDown() {\n      this.ignoreBlur = true;\n    }\n    /**\r\n     * @param {number} index \r\n     */\n\n  }, {\n    key: "_onOptionClick",\n    value: function _onOptionClick(index) {\n      this._onOptionChange(index);\n\n      this.updateOptionAt(index);\n      this.inputEl.focus();\n    } // #endregion domCallbacks\n    // #region domManipulation\n\n    /**\r\n     * @param {Element} container\r\n     */\n\n  }, {\n    key: "_createOption",\n    value:\n    /**\r\n     * @param {string} option\r\n     * @param {number} index\r\n     */\n    function _createOption(option, index) {\n      var optionEl = document.createElement(\'div\');\n      optionEl.setAttribute(\'role\', \'option\');\n      optionEl.id = "".concat(this.idBase, "-").concat(index);\n      optionEl.className = index === 0 ? \'combo-option option-current\' : \'combo-option\';\n      optionEl.setAttribute(\'aria-selected\', \'false\');\n      optionEl.innerText = option;\n      optionEl.addEventListener(\'click\', this._onOptionClick.bind(this, index));\n      optionEl.addEventListener(\'mousedown\', this._onOptionMouseDown.bind(this));\n      this.listboxEl.appendChild(optionEl);\n    } // TODO: replace with method that removes specific \n\n  }, {\n    key: "_cleanOptions",\n    value: function _cleanOptions() {\n      this.listboxEl.innerHTML = "";\n      this.selectedEl.innerHTML = "";\n    }\n    /**\r\n     * @param {string[]} options\r\n     */\n\n  }, {\n    key: "setOptions",\n    value: function setOptions(options) {\n      var _this = this;\n\n      this._cleanOptions();\n\n      this.options = options;\n      this.filteredOptions = options;\n      options.map(function (option, index) {\n        _this._createOption(option, index);\n      });\n    } // TODO: all selected manipulation into one region\n\n  }, {\n    key: "deselectAll",\n    value: function deselectAll() {\n      var _this2 = this;\n\n      _toConsumableArray(this.selected).forEach(function (opt) {\n        var index = _this2.options.findIndex(function (x) {\n          return x === opt;\n        });\n\n        if (index === -1) return;\n\n        _this2.deselectOptionAt(index);\n      });\n\n      this.selected = [];\n    } // TODO: use this everywhere\n\n    /**\r\n     * @param {string} opt\r\n     */\n\n  }, {\n    key: "_getIndexOf",\n    value: function _getIndexOf(opt) {\n      return this.options.findIndex(function (x) {\n        return x === opt;\n      });\n    }\n    /**\r\n     * @param {string[]} options\r\n     */\n\n  }, {\n    key: "setSelected",\n    value: function setSelected(options) {\n      this.deselectAll();\n      this.selected = [];\n      options.map(this._getIndexOf.bind(this)).filter(function (x) {\n        return x >= 0;\n      }).forEach(this.selectOptionAt.bind(this));\n    }\n    /**\r\n     * @param {string} option\r\n     * @param {number} index\r\n     */\n\n  }, {\n    key: "_createOptionButton",\n    value: function _createOptionButton(option, index) {\n      var listItem = document.createElement(\'li\');\n      var buttonEl = document.createElement(\'button\');\n      buttonEl.className = \'remove-option\';\n      buttonEl.type = \'button\';\n      buttonEl.id = "".concat(this.idBase, "-remove-").concat(index);\n      buttonEl.setAttribute(\'aria-describedby\', "".concat(this.idBase, "-remove"));\n      buttonEl.addEventListener(\'click\', this.deselectOptionAt.bind(this, index));\n      buttonEl.innerHTML = option + \' \';\n      listItem.appendChild(buttonEl);\n      this.selectedEl.appendChild(listItem);\n    } // #endregion domManipulation \n\n    /**\r\n     * hide/show options based on filtering\r\n     * @param {string} value \r\n     */\n\n  }, {\n    key: "filterOptions",\n    value: function filterOptions(value) {\n      var _this3 = this;\n\n      this.filteredOptions = _filterOptions(this.options, value);\n      var options = this.el.querySelectorAll(\'[role=option]\');\n\n      _toConsumableArray(options).forEach(function (optionEl) {\n        var value = optionEl.innerText;\n\n        if (_this3.filteredOptions.indexOf(value) > -1) {\n          optionEl.style.display = \'block\';\n        } else {\n          optionEl.style.display = \'none\';\n        }\n      });\n    }\n    /**\r\n     * change focused html option element (arrows movement)\r\n     * @param {number} index \r\n     */\n\n  }, {\n    key: "_onOptionChange",\n    value: function _onOptionChange(index) {\n      this.activeIndex = index;\n      this.inputEl.setAttribute(\'aria-activedescendant\', "".concat(this.idBase, "-").concat(index)); // update active style\n\n      var options = this.el.querySelectorAll(\'[role=option]\');\n\n      _toConsumableArray(options).forEach(function (optionEl) {\n        optionEl.classList.remove(\'option-current\');\n      });\n\n      options[index].classList.add(\'option-current\');\n\n      if (this.open && isScrollable(this.listboxEl)) {\n        maintainScrollVisibility(options[index], this.listboxEl);\n      }\n    }\n    /**\r\n     * @param {number} index \r\n     */\n\n  }, {\n    key: "deselectOptionAt",\n    value: function deselectOptionAt(index) {\n      var option = this.options[index];\n      var ix = this.selected.findIndex(function (x) {\n        return x === option;\n      });\n      if (ix >= 0) this.selected.splice(ix, 1); // update aria-selected\n\n      var options = this.el.querySelectorAll(\'[role=option]\');\n      options[index].setAttribute(\'aria-selected\', \'false\');\n      options[index].classList.remove(\'option-selected\'); // remove button\n\n      var buttonEl = document.getElementById("".concat(this.idBase, "-remove-").concat(index));\n      this.selectedEl.removeChild(buttonEl.parentElement);\n\n      this._dispatchOnSelectionChanged();\n    } // TODO: change direction of arrow when opened (animation) ?\n\n    /**\r\n     * @param {number} index \r\n     */\n\n  }, {\n    key: "selectOptionAt",\n    value: function selectOptionAt(index) {\n      var option = this.options[index];\n      this.activeIndex = index;\n      this.selected.push(option);\n      this.selected.sort(); // update aria-selected\n\n      var options = this.el.querySelectorAll(\'[role=option]\');\n      options[index].setAttribute(\'aria-selected\', \'true\');\n      options[index].classList.add(\'option-selected\'); // add remove option button\n\n      this._createOptionButton(option, index);\n\n      this._dispatchOnSelectionChanged();\n    }\n    /**\r\n     * @param {number} index \r\n     */\n\n  }, {\n    key: "updateOptionAt",\n    value: function updateOptionAt(index) {\n      var option = this.options[index];\n      var optionEls = this.el.querySelectorAll(\'[role=option]\');\n      var optionEl = optionEls[index];\n      var isSelected = optionEl.getAttribute(\'aria-selected\') === \'true\';\n      if (isSelected) this.deselectOptionAt(index);else this.selectOptionAt(index);\n      this.inputEl.value = \'\';\n      this.filterOptions(\'\');\n    }\n    /**\r\n     * @param {boolean} open\r\n     * @param {boolean} [callFocus]\r\n     */\n\n  }, {\n    key: "updateMenuState",\n    value: function updateMenuState(open) {\n      var callFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      this.open = open;\n      this.comboEl.setAttribute(\'aria-expanded\', "".concat(open));\n      open ? this.el.classList.add(\'open\') : this.el.classList.remove(\'open\');\n      callFocus && this.inputEl.focus();\n    }\n  }, {\n    key: "_dispatchOnSelectionChanged",\n    value: function _dispatchOnSelectionChanged() {\n      var _this$onSelectionChan;\n\n      (_this$onSelectionChan = this.onSelectionChanged) === null || _this$onSelectionChan === void 0 ? void 0 : _this$onSelectionChan.call(this, _toConsumableArray(this.selected));\n    }\n  }], [{\n    key: "_createMultiselect",\n    value: function _createMultiselect(container) {\n      /**\r\n       * @param {string} type\r\n       * @param {[string, string][]} [attributes]\r\n       * @param {Element[] | Element} [children]\r\n       */\n      container.appendChild(newEl("ul", [["class", "selected-options"]]));\n      container.appendChild(newEl("div", [["class", "combo js-multi-buttons"]], [newEl("div", [["role", "combobox"], ["aria-haspopup", "listbox"], ["aria-expanded", "false"], // TODO: based on ID - use guid\n      // ["aria-owns", "listbox2"],\n      ["class", "input-wrapper"]], newEl("input", [["aria-activedescendant", ""], ["aria-autocomplete", "list"], ["aria-labelledby", "combo-label combo-selected"], // ["id", "combo"],\n      ["class", "combo-input"], ["type", "text"]])), newEl("div", [["class", "combo-menu"], ["role", "listbox"], ["aria-multiselectable", "true"], ["id", "listbox2"]])]));\n    }\n  }]);\n\n  return MultiselectButtons;\n}(); // TODO: when no option selected, there can be button with label which opens and focus menu on click\n// TODO: close menu on enter when nothing selected\n// TODO: when using enter to check/uncheck (maybe only when using search) blur select\n// TODO: minify build ... babel compile to ES5 ? \n// TODO: selec buttons should not be selectable\n\n\nmodule.exports = {\n  MultiselectButtons: MultiselectButtons\n};\n\n//# sourceURL=webpack:///./src/MultiselectButtons.js?')},"./src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _style_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./style.css */ "./src/style.css");\n/* harmony import */ var _gc_style_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gc-style.css */ "./src/gc-style.css");\n/* harmony import */ var _MultiselectButtons__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MultiselectButtons */ "./src/MultiselectButtons.js");\n/* harmony import */ var _MultiselectButtons__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_MultiselectButtons__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nwindow.MultiselectButtons = _MultiselectButtons__WEBPACK_IMPORTED_MODULE_2__.MultiselectButtons;\n\n//# sourceURL=webpack:///./src/index.js?')},"./src/gc-style.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./src/gc-style.css?")},"./src/style.css":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack:///./src/style.css?")}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var t=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](t,t.exports,__webpack_require__),t.exports}__webpack_require__.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(n,e)=>{for(var t in e)__webpack_require__.o(e,t)&&!__webpack_require__.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},__webpack_require__.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),__webpack_require__.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./src/index.js")})();